<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YuMou&#39;sblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-18T08:47:25.764Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yu mou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分享一种在markdown中插入图片的新方法</title>
    <link href="http://yoursite.com/2018/10/18/%E5%88%86%E4%BA%AB%E4%B8%80%E7%A7%8D%E5%9C%A8markdown%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/18/分享一种在markdown中插入图片的新方法/</id>
    <published>2018-10-18T07:14:27.000Z</published>
    <updated>2018-10-18T08:47:25.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我在前面的hexo使用笔记中介绍过怎么插入图片，前面那种方法虽然能用，但还是有点麻烦，每次插入图片都要写一段markdown代码。每次创建新博客的时候都会新建一个md文件和一个文件夹，不仅麻烦而且还让博客文件夹变得不简洁。下面我介绍一种新的方法，既不用创建新的存放图片的文件夹，而且还自动生成markdown语法代码，再插入图片的时候直接ctrl+v就完事了，看起来是不是很方便呢？</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>下面进入正文，这种酷炫的新方法来自于<a href="https://github.com/kingname/MarkdownPicPicker/" target="_blank" rel="noopener">大佬的git链接</a><br>MarkdownPicPicker 是一个Markdown写作辅助工具。它能将剪贴板中的图片上传到网络图床中，并将markdown格式的图片链接(![]（&lt;图片地址&gt;))复制到剪贴板中。<br>项目的readme中指明了安装使用方法<br><a href="https://github.com/kingname/MarkdownPicPicker/releases/download/v1.0.0/MarkdownPicPicker_v1.0.0.zip" target="_blank" rel="noopener">下载链接</a><br>下载完成后并解压，解压完成后得到一个MarkdownPicPicker.exe可执行文件和一个pic文件夹。  </p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>截图之后，比如我使用qq的快捷键截图，然后运行一下MarkdownPicPicker.exe，在你的编辑器中按下ctrl+v,神奇的事情就发生了，你会直接得到一段markdown插入图片的代码。是不是比上次的方法方便多了。<br><img src="https://raw.githubusercontent.com/kingname/MarkdownPicPicker/master/screenshots/MarkdownPicPickerPrew.gif" alt=""><br>如果你只想复制链接，不想让他变成这种形式，那么，你可以在命令行中输入markdownpicpicker.exe -linkonly  </p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>如果你觉得上面的方法还不够方便？是不是每次还要用鼠标来运行exe文件觉得很麻烦？<br>没关系，还有一种方法可以优化这些步骤。<br>官方文档说使用AutoHotKey来启动程序可以吧整个流程缩短到两秒钟  </p><h2 id="AutoHotkey"><a href="#AutoHotkey" class="headerlink" title="AutoHotkey"></a>AutoHotkey</h2><p>AutoHotKey是什么东西？我其实也是第一次听说这个什么软件，完全一脸懵比，上网上查了下才知道是干什么用的，在官网上下载之后然后运行出来发现是一份英文帮助文档，我也看不懂说的是什么。后面才知道这是个脚本程序，可以自定义快捷键来执行某个程序或某种命令。　　</p><p>##　怎么使用呢？<br>新建一个文本本件，名字随便起，然后把后缀名改为.ahk<br>然后编辑这个文件输入以下代码：　　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#b::Run, D:\git第三方包和软件\MarkdownPicPicker_v1.0.0\markdownpicpicker.exe</span><br><span class="line">Return</span><br><span class="line">!b::Run, D:\git第三方包和软件\MarkdownPicPicker_v1.0.0\markdownpicpicker.exe -linkonly</span><br><span class="line">Return</span><br></pre></td></tr></table></figure></p><p>在鼠标右键点击run script即可运行。这里定义了两个快捷键，第一行代码表示按下键盘win+b键执行markdownpicpicker.exe第三行表示按下alt+b执行markdownpicpicker.exe -linkonly这和在命令行中的执行文件是一样的。关于autohotkey还有很多作用，请自行baidu,google。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我在前面的hexo使用笔记中介绍过怎么插入图片，前面那种方法虽然能用，但还是有点麻烦，每次插入图片都要写一段markdown代码。每次创建新
      
    
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="图片" scheme="http://yoursite.com/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>python与MongoDB</title>
    <link href="http://yoursite.com/2018/10/18/python%E4%B8%8EMongoDB-1/"/>
    <id>http://yoursite.com/2018/10/18/python与MongoDB-1/</id>
    <published>2018-10-18T02:41:57.000Z</published>
    <updated>2018-10-18T09:02:13.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h2><p>MongoDB是一款基于c++开发的开源文档数据库，数据在MongoDB中以Key-Value的形式存储，就像是python的字典一样。使用MongoDB的管理软件Robo3T可以实现数据库的可视化。  </p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p>首先下载并解压MongoDB:<br>访问官网，从官网上下载：<a href="https://www.mongodb.com/download-center/v2/community" target="_blank" rel="noopener">官网下载</a><br><img src="/2018/10/18/python与MongoDB-1/1.png" alt="安装"><br>选择适合自己的版本和操作系统然后Download就可以了<br>解压后把Bin下的文件辅助到新的文件夹（在c盘或者d盘创建MongoDB文件夹）并创建存储数据库的文件夹Data和日志文件夹Log<br>并创建mongod.conf，操作完成后文件目录如下图所示：<br><img src="/2018/10/18/python与MongoDB-1/2.png" alt="目录"><br>接下来就是编辑mongod.conf了<br>使用notepad++或其他除了编辑器(除了记事本)打开mongod.conf然后将以下代码复制进去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: D:\MongoDB\Log\mongo.log</span><br><span class="line">  logAppend: true</span><br><span class="line">storage:</span><br><span class="line">  dbPath: D:\MongoDB\Data</span><br><span class="line">net:</span><br><span class="line">  bindIp: 127.0.0.1</span><br><span class="line">security:</span><br><span class="line">  authorization: disabled</span><br></pre></td></tr></table></figure></p><p>这里的path和dppath根据设置成自己的路径，比如我的Log和Data是放在D盘MongoDB文件夹下的。<br>然后在安装目录下启动命令行，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --config mongod.conf</span><br></pre></td></tr></table></figure></p><p>即可启动Mongodb(ps:启动后不能关闭这个窗口哦，否则mongodb服务会被关闭，还有一种方法可以将mongodb设置为windows服务启动，这样就不用每次输入命令启动啦，不过这种方法我还没有研究怎么用，等我会使用了在更新。)  </p><h1 id="Robo-3T"><a href="#Robo-3T" class="headerlink" title="Robo 3T"></a>Robo 3T</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Robo 3T是一个快平台的MongoDB管理工具，可以在图形界面中查询或者修改MongoDB  </p><h2 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h2><p><a href="https://robomongo.org/download" target="_blank" rel="noopener">访问官网下载robo3t</a><br>选择Download robo3t<br>等待安装完成后打开  </p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>单机create链接(如下图),如果monggodb在本地计算机上面运行，只需要在Name这一栏填一个名字就可(也可以不填使用默认名字)，单击save即可<br><img src="/2018/10/18/python与MongoDB-1/r3.png" alt="create"><br><img src="/2018/10/18/python与MongoDB-1/r4.png" alt="create"><br>然后点击connect就可以连接MongoDB了<br><img src="/2018/10/18/python与MongoDB-1/r5.png" alt="create"><br>可以看到，数据在MongoDB中是按照库(Database)——集合——文档的层级关系来存储的。文档就像是python中的一个字典，集合相当于一个包含了很多字典的列表；库相当于一个大字典，大字典里面的每一个键值对都对应了一个集合，key为集合的名字，Value就是一个集合。  </p><h1 id="PyMongo"><a href="#PyMongo" class="headerlink" title="PyMongo"></a>PyMongo</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymongo</span><br></pre></td></tr></table></figure><h2 id="pymongo的使用"><a href="#pymongo的使用" class="headerlink" title="pymongo的使用"></a>pymongo的使用</h2><h3 id="使用pymongo初始化数据库连接"><a href="#使用pymongo初始化数据库连接" class="headerlink" title="使用pymongo初始化数据库连接"></a>使用pymongo初始化数据库连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pymongo import MongoClient</span><br><span class="line">client = MongoClient()</span><br><span class="line">database = client[&apos;库名&apos;]#创建一个库</span><br><span class="line">collection = database[&apos;集合名&apos;]#创建一个集合</span><br><span class="line">#这里的库名和集合名除了可以是字符串还可以是一个变量，当库名或者集合名是一个变量的时候，可以通过循环来批量操作数据库，比如要创建多个集合的时候，可以吧集合名先保存到一个列表中，然后通过循环穿件多个集合。</span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>插入操作用到的方法为insert(参数)参数就是python的字典。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from pymongo import MongoClient</span><br><span class="line">client = MongoClient()</span><br><span class="line">database = client[&apos;Chapter6&apos;]</span><br><span class="line">collection = database[&apos;spider&apos;]</span><br><span class="line">data = &#123;&apos;id&apos;: 2, &apos;name&apos;: &apos;张三&apos;, &apos;age&apos;: 20, &apos;salary&apos;: 9999&#125;</span><br><span class="line">collection.insert(data)#插入一条数据</span><br><span class="line">#当然也可以一次插入多条数据，先把多条数据保存到一个列表中，然后直接使用insert()即可</span><br><span class="line">more_data = [</span><br><span class="line">    &#123;&apos;id&apos;: 3, &apos;name&apos;: &apos;张四&apos;, &apos;age&apos;: 20, &apos;salary&apos;: 999&#125;,</span><br><span class="line">    &#123;&apos;id&apos;: 4, &apos;name&apos;: &apos;张五&apos;, &apos;age&apos;: 20, &apos;salary&apos;: 99&#125;,</span><br><span class="line">    &#123;&apos;id&apos;: 5, &apos;name&apos;: &apos;张六&apos;, &apos;age&apos;: 20, &apos;salary&apos;: 9&#125;,</span><br><span class="line">    &#123;&apos;id&apos;: 6, &apos;name&apos;: &apos;张七&apos;, &apos;age&apos;: 20, &apos;salary&apos;: 19999&#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">collection.insert(more_data)</span><br></pre></td></tr></table></figure><h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><p>查找功能对应的方法是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find(查询条件，返回字段)#返回所有符合的信息</span><br><span class="line">find_one(查询条件，返回字段)#返回一条符合的信息</span><br></pre></td></tr></table></figure><p>在不写find方法参数的时候，表示获取指定集合中所有字段。<br>返回字段的参数指定返回内容。这个参数也是一个字典，key就是字段的名称，value是0或1,0表示不返回这个字段，1表示返回这个字段。其中_id这个字段比较特殊，必须人工指定它的值为0，这样才不会返回。而对于其他数据，应该统一使用返回，或者不返回。eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection.find(&#123;&apos;age&apos;:20&#125;,&#123;&apos;_id&apos;:0&#125;)#查询所有age为20的记录，返回除了_id的所有字段</span><br></pre></td></tr></table></figure><p>这里需要知道：find()方法返回的是一个pymongo对象，这个对象可以被for循环展开，展开之后可以得到很多个字典。<br>pymongo也支持逻辑查询：<br>它们对应的关键词如下所示：  </p><ul><li>$gt great than 大于</li><li>$lt less than 小于</li><li>$gte Greater than equal to 大于等于</li><li>$lte less than equal to 小于等于</li><li>$eq equal to 等于</li><li>$ne not equal to 不等于<br>eg:  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">collection.find(&apos;age&apos;:&#123;&apos;$gt&apos;:19&#125;)#查询age&gt;19的记录</span><br><span class="line">collection.find(&apos;age&apos;:&#123;&apos;$gte&apos;:19,&apos;$lt&apos;:30&#125;)#查询19≤age&lt;30的记录</span><br></pre></td></tr></table></figure><h3 id="对查询结果进行排序"><a href="#对查询结果进行排序" class="headerlink" title="对查询结果进行排序"></a>对查询结果进行排序</h3><p>排序的方法为sort(),这个方法一般和find()配合使用<br>他有两个参数，第一个参数指明以那一项进行排序，第二个参数为1或者-1，1表示升序，-1表示降序。eg:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection.find(&apos;age&apos;:&#123;&apos;$gt&apos;:19&#125;).sort(&apos;age&apos;,-1)#查询所有age大于19并以age按照降序进行排序。</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>修改也有两个方法： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">collection.updata_one(参数1，参数2)#修改一条</span><br><span class="line">collection.updata_many(参数1，参数2)#修改多条</span><br></pre></td></tr></table></figure><p>参数1和2都是字典形式具体使用如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection.upadta_many(&#123;&apos;name&apos;:&apos;张三&apos;&#125;,&#123;&apos;$set&apos;:&#123;&apos;age&apos;:30&#125;&#125;)#将姓名为张三的人年龄全部改为30</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除也有两个方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">collection.delete_one(&apos;name&apos;:&apos;张三&apos;)#把第一个name是张三的记录删除</span><br><span class="line">collection.delete_many(&apos;name&apos;:&apos;张三&apos;)#把name是张三的记录全部删除</span><br></pre></td></tr></table></figure><p>删除方法只有一个参数，是字典形式。<br>至此,mongodb以及pymongo的使用暂时结束了！</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MongoDB&quot;&gt;&lt;a href=&quot;#MongoDB&quot; class=&quot;headerlink&quot; title=&quot;MongoDB&quot;&gt;&lt;/a&gt;MongoDB&lt;/h1&gt;&lt;h2 id=&quot;介绍：&quot;&gt;&lt;a href=&quot;#介绍：&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://yoursite.com/categories/MongoDB/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="数据库，MongoDB" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8CMongoDB/"/>
    
  </entry>
  
  <entry>
    <title>一键设置爬虫headers</title>
    <link href="http://yoursite.com/2018/10/18/%E4%B8%80%E9%94%AE%E8%AE%BE%E7%BD%AE%E7%88%AC%E8%99%ABheaders/"/>
    <id>http://yoursite.com/2018/10/18/一键设置爬虫headers/</id>
    <published>2018-10-18T01:34:38.000Z</published>
    <updated>2018-10-18T04:59:41.324Z</updated>
    
    <content type="html"><![CDATA[<p>在写爬虫的时候我们经常需要设置headers属性来让爬虫模拟浏览器从而获得数据。在添加headers属性的时候，需要把浏览器所有的headers属性都写上去：<br><img src="/2018/10/18/一键设置爬虫headers/1.png" alt="headers属性"><br>这么长的headers如果复制下来然后手动把它设置成字典的形式太麻烦、太费时间。那么有没有办法一下把这些属性转为字典形式呢？带着这个疑问我向大佬请教：<br><img src="/2018/10/18/一键设置爬虫headers/2.jpg" alt="kk"><br>大佬不愧是大佬，分分钟解决我的问题好吧。<br>下面介绍下这个方法：<br>安装（输入以下命令）：<br>pip install –upgrade git+<a href="https://github.com/kingname/CrawlerUtility.git" target="_blank" rel="noopener">https://github.com/kingname/CrawlerUtility.git</a><br>使用：<br><img src="/2018/10/18/一键设置爬虫headers/3.jpg" alt="使用"><br>首先引入这个包<br>然后把从浏览器复制下来的headers保存成长字符串。<br>在使用ChromeHeaders2Dict解析一下就完事了<br>是不是很简单！<br>推荐：<a href="https://github.com/kingname" target="_blank" rel="noopener">大佬的github</a></p><hr><p>后记：<br>我使用这个包的时候，是第一次使用别人手动写的第三方包，中间也遇到了很多问题。比如一开始我不知道怎么安装，然后在网上搜了一下怎么安装的资料。我这才知道安装第三方包原来有两种方式，我以前还以为只能手动下载安装呢。下面记录下两种安装方式：<br>一、手动安装</p><ol><li>在github上面下载包</li><li>然后解压该文件</li><li>在该文件夹按住shift+鼠标右键 在此处打开命令行窗口，然后输入python setup.py install</li></ol><p>二、自动安装<br>直接在命令行输入pip install 包<br>eg:pip install pillow<br>其实在每个github项目下都有README文件在这个文件里都会介绍怎么install，比如上面的这个项目：<br><img src="/2018/10/18/一键设置爬虫headers/3.png" alt="安装"><br>然后：<br>问题又来了，在上面这些东西都弄好了之后我在pycharm上面引入的时候pycharm报错，对于我这样一个萌新来说瞬间又懵了。于是我又向大佬请教…这才知道pycharm原来还有一个加载时间，果然一小会过后，这个包就能正常使用了。<br>不得不说，这个大佬人真的很好，身为这么大的一个大佬，对于我这个萌新的问题都很耐心的解答，再次表示感谢。<br>这个大佬就是我最近看的一本爬虫书的作者<br><img src="/2018/10/18/一键设置爬虫headers/4.jpg" alt="爬虫书"><br>技术过硬人又好！！！推荐去看看这本书，写的真不错，我这种死笨死笨的萌新都看的很明白！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在写爬虫的时候我们经常需要设置headers属性来让爬虫模拟浏览器从而获得数据。在添加headers属性的时候，需要把浏览器所有的headers属性都写上去：&lt;br&gt;&lt;img src=&quot;/2018/10/18/一键设置爬虫headers/1.png&quot; alt=&quot;header
      
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="headers" scheme="http://yoursite.com/tags/headers/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用笔记</title>
    <link href="http://yoursite.com/2018/10/17/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/17/hexo使用笔记/</id>
    <published>2018-10-17T13:21:46.000Z</published>
    <updated>2018-10-18T07:08:01.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建新文件"><a href="#创建新文件" class="headerlink" title="创建新文件"></a>创建新文件</h2><p>在D:/个人博客/BLOG/source/_posts文件夹下执行命令<br>hexo new ‘新文件名字’<br><img src="/2018/10/17/hexo使用笔记/hexo1.png" alt="新建文件">  </p><h2 id="在文本中添加图片"><a href="#在文本中添加图片" class="headerlink" title="在文本中添加图片"></a>在文本中添加图片</h2><ol><li>把主页配置文件_config.yml里的post_asset_folder:这个选项设置为true(如过以后不想生成同名的文件夹了改为false即可)</li><li>在hexo目录下执行mup install hexo_asset_image –save,这是下载安装上传本地图片的插件。</li><li>等待安装完成后，再运行上面创建新文件的命令来生成新md文件时，/source/_posts文件夹中除了xxx.md文件还有一个同名的文件夹。</li><li>最后在xxx.md中想引入图片时，先把图片复制到这个文件夹中，然后只需要在xxx.md中按照markdown的格式引入图片：<br><img src="/2018/10/17/hexo使用笔记/hexo2.png" alt="插入图片"><br>ps:!后面没有空格，hexo使用笔记前可加/也可以不加，图片名字一定不要写错。<h2 id="在页面中添加超链接"><a href="#在页面中添加超链接" class="headerlink" title="在页面中添加超链接"></a>在页面中添加超链接</h2><img src="/2018/10/17/hexo使用笔记/hexo3.png" alt="添加链接"><h2 id="关于文章推送的问题"><a href="#关于文章推送的问题" class="headerlink" title="关于文章推送的问题"></a>关于文章推送的问题</h2>之前由于不会弄，导致每次推送时都把git上面的CNAME文件弄丢了，每次推送完之后还要重新创建CNAME文件，这样很麻烦。通过查阅资料知道了把CNAME文件放在本地hexo目录下source的_posts文件夹下就可以解决这个问题了。<h2 id="关于云解析"><a href="#关于云解析" class="headerlink" title="关于云解析"></a>关于云解析</h2>首先要有一个域名，我用的是腾讯云域名：<br><img src="/2018/10/17/hexo使用笔记/云解析.png" alt="域名解析"><br>www和@主机记录的记录值是自己的githubpage的地址<br>然后本地文件中要有一个CNAME文件，这个文件只有一行：<br><img src="/2018/10/17/hexo使用笔记/cname.png" alt="CNAME"><br>这样就行了</li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建新文件&quot;&gt;&lt;a href=&quot;#创建新文件&quot; class=&quot;headerlink&quot; title=&quot;创建新文件&quot;&gt;&lt;/a&gt;创建新文件&lt;/h2&gt;&lt;p&gt;在D:/个人博客/BLOG/source/_posts文件夹下执行命令&lt;br&gt;hexo new ‘新文件名字’&lt;br
      
    
    </summary>
    
      <category term="HEXO" scheme="http://yoursite.com/categories/HEXO/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>HELL HEXO</title>
    <link href="http://yoursite.com/2018/10/17/HELL-HEXO/"/>
    <id>http://yoursite.com/2018/10/17/HELL-HEXO/</id>
    <published>2018-10-17T04:43:34.000Z</published>
    <updated>2018-10-17T09:36:37.566Z</updated>
    
    <content type="html"><![CDATA[<p>This is my BLOG</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is my BLOG&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/10/17/hello-world/"/>
    <id>http://yoursite.com/2018/10/17/hello-world/</id>
    <published>2018-10-17T03:45:33.021Z</published>
    <updated>2018-10-17T09:33:25.859Z</updated>
    
    <content type="html"><![CDATA[<p>Hello,this is my blog,i’m Yu deqiang. nice to meet you!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello,this is my blog,i’m Yu deqiang. nice to meet you!&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
